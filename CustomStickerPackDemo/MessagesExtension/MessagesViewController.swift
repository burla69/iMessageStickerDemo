//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Yudiz Solutions Pvt.Ltd. on 28/01/17.
//  Copyright Â© 2017 Yudiz Solutions Pvt.Ltd. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    // MARK: - Outlet
    
    // MARK: - Variables
    var arrSticker :[MSSticker] = []
    
    // MARK: - iOS Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.getStickers()
        self.createStickerBrowser()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}

//MARK:- General Method
extension MessagesViewController {
    
    func getStickers(){
        for i in 1...4 {
            if let url = Bundle.main.url(forResource: "\(i)", withExtension: "gif") {
                do {
                    let sticker = try MSSticker(contentsOfFileURL: url, localizedDescription: "")
                    arrSticker.append(sticker)
                } catch {
                    print(error.localizedDescription)
                }
            }
        }
        for i in 1...10 {
            if let url = Bundle.main.url(forResource: "Sticker_\(i)", withExtension: "png") {
                do {
                    let sticker = try MSSticker(contentsOfFileURL: url, localizedDescription: "")
                    arrSticker.append(sticker)
                } catch {
                    print(error.localizedDescription)
                }
            }
        }
    }
    
    func createStickerBrowser(){
        let stickerBrowserVC = MSStickerBrowserViewController(stickerSize: .small)
        
        addChildViewController(stickerBrowserVC)
        view.addSubview(stickerBrowserVC.view)
        
        stickerBrowserVC.stickerBrowserView.backgroundColor = UIColor.lightGray.withAlphaComponent(0.5)
        stickerBrowserVC.stickerBrowserView.dataSource = self
        
        view.topAnchor.constraint(equalTo: stickerBrowserVC.view.topAnchor).isActive = true
        view.bottomAnchor.constraint(equalTo: stickerBrowserVC.view.bottomAnchor).isActive = true
        view.leftAnchor.constraint(equalTo: stickerBrowserVC.view.leftAnchor).isActive = true
        view.rightAnchor.constraint(equalTo: stickerBrowserVC.view.rightAnchor).isActive = true
    }
}

//MARK:- MSStickerBrowserView DataSource

extension MessagesViewController : MSStickerBrowserViewDataSource{
    
    func numberOfStickers(in stickerBrowserView: MSStickerBrowserView) -> Int{
        return arrSticker.count
    }
    
    func stickerBrowserView(_ stickerBrowserView: MSStickerBrowserView, stickerAt index: Int) -> MSSticker{
        return arrSticker[index]
    }
}
