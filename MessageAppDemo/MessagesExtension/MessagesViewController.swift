//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Yudiz Solutions Pvt.Ltd. on 28/01/17.
//  Copyright Â© 2017 Yudiz Solutions Pvt.Ltd. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}
// MARK: - General Method
extension MessagesViewController{
    //
    func createImageForMessage() -> UIImage? {
        let bgv = UIView(frame: CGRect(x: 0, y: 0, width: 300, height: 300))
        bgv.backgroundColor = UIColor.lightGray.withAlphaComponent(0.5)
        
        let lbl = UILabel(frame: CGRect(x: 50, y: 50, width: 200, height: 200))
        lbl.font = UIFont.systemFont(ofSize: 56.0)
        lbl.backgroundColor = UIColor.clear
        lbl.textColor = UIColor.white
        lbl.text = "Yudiz"
        lbl.shadowColor = UIColor.orange
        lbl.shadowOffset = CGSize(width: 1, height: 3)
        lbl.textAlignment = .center
        lbl.clipsToBounds = true
        
        bgv.addSubview(lbl)
        bgv.frame.origin = CGPoint(x: view.frame.size.width, y: view.frame.size.height)
        view.addSubview(bgv)
        
        UIGraphicsBeginImageContextWithOptions(bgv.frame.size, false, UIScreen.main.scale)
        bgv.drawHierarchy(in: bgv.bounds, afterScreenUpdates: true)
        
        let img = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        bgv.removeFromSuperview()
        
        return img
    }
}
// MARK: - Actions
extension MessagesViewController{
    @IBAction func btnCreateImageAction(_ sender: UIButton!){
        if let img = createImageForMessage(), let conversation = activeConversation {
            let layout = MSMessageTemplateLayout()
            layout.image = img
            layout.caption = "Yudiz Solutions Pvt Ltd"
            
            let message = MSMessage()
            message.layout = layout
            message.url = URL(string: "http://www.yudiz.com")
            conversation.insert(message, completionHandler: { (error) in
                print(error ?? "Inserted successfully")
            })
        }
    }
}
